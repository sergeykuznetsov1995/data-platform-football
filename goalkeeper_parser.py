#!/usr/bin/env python3
"""
Goalkeeper Parser - CLI entry point for goalkeeper statistics

This script provides a command-line interface for parsing goalkeeper statistics
from FBref.com using the GoalkeeperParser class from the fbref_parser package.

Supports:
- Individual goalkeeper parsing
- Full squad goalkeeper parsing
"""

import argparse
import sys

from fbref_parser import GoalkeeperParser
from fbref_parser.utils.file_helpers import ensure_directory_exists
from fbref_parser.constants import DEFAULT_OUTPUT_DIR_GOALKEEPERS


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal —Å FBref.com',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):
    python3 goalkeeper_parser.py

  –ü–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É:
    python3 goalkeeper_parser.py --squad-url "https://fbref.com/en/squads/18bb7c10/Arsenal-Stats"

  –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ:
    python3 goalkeeper_parser.py --url "https://fbref.com/en/players/98ea5115/David-Raya"

–†–µ–∑—É–ª—å—Ç–∞—Ç:
  - CSV —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /root/data_platform/test_arsenal_goalkeepers/
  - –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—Ç–∞—Ä—è –ø–æ –≤—Å–µ–º —Ç—É—Ä–Ω–∏—Ä–∞–º
        """
    )

    parser.add_argument(
        '--squad-url',
        default='https://fbref.com/en/squads/18bb7c10/2025-2026/all_comps/Arsenal-Stats-All-Competitions',
        help='URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π'
    )

    parser.add_argument(
        '--url',
        help='URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤–º–µ—Å—Ç–æ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã)'
    )

    parser.add_argument(
        '-o', '--output',
        help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è)'
    )

    args = parser.parse_args()

    # Initialize parser
    gk_parser = GoalkeeperParser()

    # Create output directory
    ensure_directory_exists(DEFAULT_OUTPUT_DIR_GOALKEEPERS)

    try:
        if args.url:
            # Parse single goalkeeper
            print("ü•Ö –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è")

            # Extract player name from URL
            if '/players/' in args.url:
                player_id_part = args.url.split('/players/')[1]
                if '/all_comps/' in player_id_part:
                    player_name_part = player_id_part.split('/all_comps/')[1]
                    player_name = player_name_part.split('-Stats')[0].replace('-', ' ')
                else:
                    # Try to extract name from other parts of URL
                    parts = player_id_part.split('/')
                    if len(parts) > 1:
                        player_name = parts[-1].replace('-', ' ').split('-Stats')[0]
                    else:
                        player_name = "Goalkeeper"
            else:
                player_name = "Goalkeeper"

            # Check that URL contains all_comps
            if '/all_comps/' not in args.url:
                print("‚ö†Ô∏è URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '/all_comps/' - –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                # Try to convert URL
                if '/players/' in args.url:
                    base_url = args.url.split('/players/')[0]
                    player_part = args.url.split('/players/')[1]
                    player_id = player_part.split('/')[0]
                    normalized_name = player_name.replace(' ', '-')
                    args.url = f"{base_url}/players/{player_id}/all_comps/{normalized_name}-Stats---All-Competitions"

            print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥: {player_name}")
            print(f"üîó URL: {args.url}")

            # Determine output path
            if args.output:
                output_path = args.output
            else:
                from fbref_parser.utils.file_helpers import normalize_name
                normalized_name = normalize_name(player_name)
                output_path = f"/root/data_platform/{normalized_name}_goalkeeper_stats.csv"

            # Parse goalkeeper
            player_data = gk_parser.parse_goalkeeper(player_name, args.url, output_path=output_path)

            if player_data is not None and not player_data.empty:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(player_data)} —Å–µ–∑–æ–Ω–æ–≤, {len(player_data.columns)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—Ç–∞—Ä—è")
                sys.exit(1)

        else:
            # Parse all Arsenal goalkeepers
            print("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal")
            result = gk_parser.parse_squad_goalkeepers(args.squad_url)

            if result > 0:
                print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result} –≤—Ä–∞—Ç–∞—Ä–µ–π.")
            else:
                print("\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.")
                sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
