#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal —Å FBref.com
–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–≥—Ä–æ–∫–æ–≤
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import time
import re
import numpy as np
import argparse
import sys
import os

def fix_column_names(columns):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫, —É–±–∏—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ Unnamed: –ø—Ä–µ—Ñ–∏–∫—Å—ã"""
    new_columns = []

    for col in columns:
        col_str = str(col)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å "Unnamed: X_level_0_"
        if col_str.startswith('Unnamed:') and '_level_0_' in col_str:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            clean_name = col_str.split('_')[-1]
            new_columns.append(clean_name)
        else:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            new_columns.append(col_str)

    return new_columns

def clean_dataframe(df):
    """–û—á–∏—Å—Ç–∫–∞ DataFrame –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if df.empty:
        return df

    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Matches
    matches_cols = [col for col in df.columns if 'Matches' in str(col) or 'matches' in str(col).lower()]
    df = df.drop(columns=matches_cols, errors='ignore')

    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
    season_cols = [col for col in df.columns if 'Season' in str(col)]
    if season_cols:
        season_col = season_cols[0]

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df[~df[season_col].astype(str).str.contains('Season|Seasons|Club|Clubs|Total|League', na=False)]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    comp_cols = [col for col in df.columns if 'Comp' in str(col) and 'Competition' not in str(col)]
    if comp_cols:
        comp_col = comp_cols[0]
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        df = df[~df[comp_col].astype(str).str.contains('Comp|Competition|Country|Squad|MP|Min', na=False)]

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df.dropna(how='all')

    return df

def clean_final_dataframe_gk(df):
    """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ DataFrame –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π"""
    print("\nüßπ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—Ç–∞—Ä—è...")

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    basic_renames = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        'Season': 'season',
        'Age': 'age',
        'Squad': 'squad',
        'Country': 'country',
        'Comp': 'competition',
        'MP': 'matches_played',
        'Starts': 'starts',
        'Min': 'minutes',
        '90s': 'minutes_90',

        # Goalkeeping
        'GA': 'goals_against',
        'GA90': 'goals_against_per90',
        'SoTA': 'shots_on_target_against',
        'Saves': 'saves',
        'Save%': 'save_pct',
        'W': 'wins',
        'D': 'draws',
        'L': 'losses',
        'CS': 'clean_sheets',
        'CS%': 'clean_sheet_pct',
        'PKA': 'penalty_kicks_attempted',
        'PKsv': 'penalty_kicks_saved',
        'PKm': 'penalty_kicks_missed',
        'PSxG': 'post_shot_expected_goals',
        'PSxG/SoT': 'psxg_per_shot_on_target',
        'PSxG+/-': 'psxg_net',
        '/90': 'per_90_minutes',

        # Passing
        'Cmp': 'passes_completed',
        'Att': 'passes_attempted',
        'Cmp%': 'pass_completion_pct',
        'TotDist': 'total_pass_distance',
        'PrgDist': 'progressive_pass_distance',
        'AvgLen': 'avg_pass_length',
        'Launched': 'long_passes_attempted',
        'Launch%': 'long_pass_pct',

        # Standard stats
        'Gls': 'goals',
        'Ast': 'assists',
        'G+A': 'goals_plus_assists',
        'G-PK': 'non_penalty_goals',
        'PK': 'penalty_kicks_made',
        'PKatt': 'penalty_kicks_attempted',
        'xG': 'expected_goals',
        'npxG': 'non_penalty_expected_goals',
        'xA': 'expected_assists',

        # Shooting
        'Sh': 'shots',
        'SoT': 'shots_on_target',
        'SoT%': 'shots_on_target_pct',
        'G/Sh': 'goals_per_shot',
        'G/SoT': 'goals_per_shot_on_target',

        # Defense
        'Tkl': 'tackles',
        'TklW': 'tackles_won',
        'Def 3rd': 'tackles_def_3rd',
        'Mid 3rd': 'tackles_mid_3rd',
        'Att 3rd': 'tackles_att_3rd',
        'Int': 'interceptions',
        'Blocks': 'blocks',

        # Possession
        'Touches': 'touches',
        'Def Pen': 'touches_def_pen_area',
        'Live': 'live_ball_touches',
        'Carries': 'carries',
        'Take-Ons': 'take_ons',

        # GCA/SCA
        'GCA': 'goal_creating_actions',
        'GCA90': 'goal_creating_actions_per90',
        'SCA': 'shot_creating_actions',
        'SCA90': 'shot_creating_actions_per90',

        # Miscellaneous
        'CrdY': 'yellow_cards',
        'CrdR': 'red_cards',
        'Fls': 'fouls_committed',
        'Fld': 'fouls_drawn',
        'Recov': 'ball_recoveries',
        'Won': 'aerial_duels_won',
        'Lost': 'aerial_duels_lost',
        'Won%': 'aerial_duels_won_pct',

        # Pass Types
        'Live': 'live_passes',
        'Dead': 'dead_passes',
        'FK': 'free_kicks',
        'TB': 'through_balls',
        'Sw': 'switches',
        'Crs': 'crosses',
        'TI': 'throw_ins',
        'CK': 'corner_kicks',

        # Goalkeeper specific
        'Opp': 'crosses_stopped',
        'Stp': 'crosses_stopped_pct',
        'Stp%': 'cross_stop_pct',
        '#OPA': 'defensive_actions_outside_penalty_area',
        'AvgDist': 'avg_distance_defensive_actions'
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ DataFrame
    existing_renames = {old: new for old, new in basic_renames.items() if old in df.columns}
    df = df.rename(columns=existing_renames)
    print(f"   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {len(existing_renames)} —Å—Ç–æ–ª–±—Ü–æ–≤")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ snake_case –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    def convert_to_snake_case(column_name):
        col = str(column_name)

        # –ó–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        col = col.replace('%', '_pct')
        col = col.replace('+', '_plus_')
        col = col.replace('-', '_minus_')
        col = col.replace('/', '_per_')
        col = col.replace('(', '_')
        col = col.replace(')', '_')
        col = col.replace(' ', '_')
        col = col.replace('&', '_and_')
        col = col.replace('#', '_num_')

        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        col = re.sub(r'_+', '_', col)

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        col = col.strip('_')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lowercase
        col = col.lower()

        return col

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º
    new_columns = [convert_to_snake_case(col) for col in df.columns]
    df.columns = new_columns

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã
    df = df.loc[:, ~df.columns.duplicated()]

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã MP (playing_time_mp –µ—Å–ª–∏ –µ—Å—Ç—å matches_played)
    if 'matches_played' in df.columns and 'playing_time_mp' in df.columns:
        df = df.drop(columns=['playing_time_mp'])
        print(f"   –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç playing_time_mp (–æ—Å—Ç–∞–≤–ª–µ–Ω matches_played)")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
    for col in df.columns:
        if df[col].dtype == 'object':
            # –£–¥–∞–ª—è–µ–º –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "eng Arsenal" -> "Arsenal")
            if 'squad' in col.lower():
                df[col] = df[col].astype(str).str.replace(r'^[a-z]{2,3}\s+', '', regex=True)

    # –û—á–∏—â–∞–µ–º Country (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "eng ENG" -> "ENG")
    if 'country' in df.columns:
        df['country'] = df['country'].astype(str).str.replace(r'^[a-z]+ ', '', regex=True)
        df['country'] = df['country'].replace('nan', '')

    # –û—á–∏—â–∞–µ–º Competition (—É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ª–∏–≥ —Ç–∏–ø–∞ "2. Championship" -> "Championship")
    if 'competition' in df.columns:
        df['competition'] = df['competition'].astype(str).str.replace(r'^\d+\. ', '', regex=True)
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        df['competition'] = df['competition'].str.replace('Jr. PL2 ‚Äî Div. 1', 'PL2 Div 1')

    print(f"üéØ –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
    return df

def normalize_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalized = re.sub(r'[^a-zA-Z\s]', '', name)
    normalized = re.sub(r'\s+', '_', normalized.strip())
    return normalized.lower()

def extract_goalkeeper_links(squad_url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã"""
    print(f"ü•Ö –ò–∑–≤–ª–µ–∫–∞—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π —Å: {squad_url}")

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        response = requests.get(squad_url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        standard_stats_table = soup.find('table', {'id': 'stats_standard_9'})
        if not standard_stats_table:
            standard_stats_table = soup.find('table', {'id': 'stats_standard_combined'})

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É ID, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if not standard_stats_table:
            all_tables = soup.find_all('table')
            alternative_ids = ['all_stats_standard', 'stats_standard']
            for alt_id in alternative_ids:
                standard_stats_table = soup.find('table', {'id': alt_id})
                if standard_stats_table:
                    break

            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if not standard_stats_table:
                for table in all_tables:
                    headers = table.find_all(['th', 'td'])
                    header_text = ' '.join([h.get_text().strip() for h in headers[:10]])
                    if any(keyword in header_text.lower() for keyword in ['player', 'nation', 'pos', 'age', 'mp', 'starts']):
                        standard_stats_table = table
                        break

        if not standard_stats_table:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return []

        goalkeeper_links = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∏–∑ tbody
        tbody = standard_stats_table.find('tbody')
        if not tbody:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω tbody –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return []

        for row in tbody.find_all('tr'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if 'thead' in row.get('class', []):
                continue

            cells = row.find_all(['td', 'th'])
            if len(cells) < 4:  # –ú–∏–Ω–∏–º—É–º –∫–æ–ª–æ–Ω–æ–∫: –ò–≥—Ä–æ–∫, –ù–∞—Ü–∏—è, –ü–æ–∑–∏—Ü–∏—è, –í–æ–∑—Ä–∞—Å—Ç
                continue

            # –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ —Å—Å—ã–ª–∫—É
            player_cell = cells[0]

            # –ü–æ–∑–∏—Ü–∏—è –æ–±—ã—á–Ω–æ –≤ 3-–π –∫–æ–ª–æ–Ω–∫–µ (–∏–Ω–¥–µ–∫—Å 2)
            position_cell = cells[2] if len(cells) > 2 else None
            position = position_cell.get_text(strip=True) if position_cell else ""

            # –û—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≤—Ä–∞—Ç–∞—Ä–µ–π
            if 'GK' not in position.upper():
                continue

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä–æ–∫–∞
            player_link = player_cell.find('a')
            if player_link and player_link.get('href'):
                href = player_link.get('href')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–∞
                if '/players/' in href:
                    player_name = player_cell.get_text(strip=True)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if any(existing_name == player_name for existing_name, _ in goalkeeper_links):
                        continue

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ URL –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
                    if '/all_comps/' not in href:
                        # –ó–∞–º–µ–Ω—è–µ–º —á–∞—Å—Ç—å URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ç—É—Ä–Ω–∏—Ä–∞–º
                        href = re.sub(r'(/players/[^/]+/)\d{4}-\d{4}/', r'\1all_comps/', href)
                        href = re.sub(r'/[^/]*-Stats$', r'Stats---All-Competitions', href)
                        if not href.endswith('Stats---All-Competitions'):
                            # –ï—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–Ω–æ–≤–æ
                            player_id = href.split('/players/')[1].split('/')[0]
                            normalized_name = player_name.replace(' ', '-')
                            href = f"/en/players/{player_id}/all_comps/{normalized_name}-Stats---All-Competitions"

                    full_url = f"https://fbref.com{href}"
                    goalkeeper_links.append((player_name, full_url))

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(goalkeeper_links)} –≤—Ä–∞—Ç–∞—Ä–µ–π:")
        for name, _ in goalkeeper_links:
            print(f"   - {name}")

        return goalkeeper_links

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π: {e}")
        return []

def identify_gk_tables(all_tables):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π (–≤–∫–ª—é—á–∞—è –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)"""

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–∞–±–ª–∏—Ü (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    gk_table_patterns = {
        'goalkeeping': ['GA', 'Save%', 'Saves', 'SoTA', 'CS'],
        'advanced_goalkeeping': ['PSxG', 'PSxG/SoT', 'PSxG+/-', 'PKA', 'PKsv', 'PKm'],
        'standard': ['Gls', 'Ast', 'G+A', 'PK', 'PKatt'],
        'shooting': ['Sh', 'SoT', 'SoT%', 'G/Sh', 'G/SoT'],
        'passing': ['Cmp', 'Att', 'Cmp%', 'TotDist', 'PrgDist', 'PrgP'],
        'pass_types': ['Live', 'Dead', 'FK', 'TB', 'Sw', 'Crs', 'TI', 'CK'],
        'gca': ['GCA', 'SCA', 'GCA90', 'SCA90'],
        'defense': ['Tkl', 'TklW', 'Def 3rd', 'Mid 3rd', 'Att 3rd', 'Blocks', 'Int'],
        'possession': ['Touches', 'Def Pen', 'Def 3rd', 'Mid 3rd', 'Att 3rd', 'Live', 'Carries', 'Take-Ons'],
        'playing_time': ['MP', 'Starts', 'Min', '90s', 'Mn/MP', 'Min%', 'Mn/Start'],
        'miscellaneous': ['CrdY', 'CrdR', 'Fls', 'Fld', 'Recov', 'Won', 'Lost', 'Won%'],
        'match_logs': ['Date', 'Day', 'Venue', 'Result', 'Opponent']
    }

    identified_tables = {
        'goalkeeping': [],
        'advanced_goalkeeping': [],
        'standard': [],
        'shooting': [],
        'passing': [],
        'pass_types': [],
        'gca': [],
        'defense': [],
        'possession': [],
        'playing_time': [],
        'miscellaneous': [],
        'match_logs': []
    }

    for i, table in enumerate(all_tables):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã (< 10 —Å—Ç—Ä–æ–∫), —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å "Last 5 Matches"
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ match logs —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if len(table) < 10:
            continue

        if isinstance(table.columns, pd.MultiIndex):
            columns = table.columns.get_level_values(-1).tolist()
        else:
            columns = list(table.columns)

        # –ß–∏—Å—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        clean_columns = [str(col).strip() for col in columns]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã
        for table_type, keywords in gk_table_patterns.items():
            matches = sum(1 for keyword in keywords if any(keyword in col for col in clean_columns))

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            if matches >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                identified_tables[table_type].append({
                    'index': i,
                    'table': table,
                    'matches': matches,
                    'columns': clean_columns[:10]  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                })

    return identified_tables

def parse_goalkeeper_stats(player_name, player_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—Ç–∞—Ä—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FBref"""
    print(f"\nü•Ö –ü–∞—Ä—Å–∏–Ω–≥ {player_name}...")
    print(f"üîó URL: {player_url}")

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        response = requests.get(player_url, headers=headers)
        response.raise_for_status()
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É

        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        all_tables = pd.read_html(response.text, encoding='utf-8')
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π
        identified_tables = identify_gk_tables(all_tables)

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table_type, tables in identified_tables.items():
            if tables:
                print(f"   {table_type}: {len(tables)} —Ç–∞–±–ª–∏—Ü")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_data = []

        for table_type, tables in identified_tables.items():
            if not tables:
                continue

            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
            best_table = max(tables, key=lambda x: x['matches'])
            table_data = best_table['table'].copy()

            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {table_type} (—Ç–∞–±–ª–∏—Ü–∞ {best_table['index']})...")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MultiIndex –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å (–∫–∞–∫ –≤ main.py)
            if isinstance(table_data.columns, pd.MultiIndex):
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –û–ë–ê —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                new_columns = []
                for col in table_data.columns:
                    if isinstance(col, tuple):
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —É—Ä–æ–≤–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
                        clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                        clean_col = re.sub(r'_+', '_', clean_col).strip('_')
                    else:
                        clean_col = str(col)
                    new_columns.append(clean_col)
                table_data.columns = new_columns

                # –ü—Ä–∏–º–µ–Ω—è–µ–º fix_column_names –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ "Unnamed:"
                table_data.columns = fix_column_names(table_data.columns)
            else:
                table_data.columns = fix_column_names(table_data.columns)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã Playing Time –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ playing_time)
            if table_type != 'playing_time':
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Playing Time —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ MultiIndex –∏ –æ–±—ã—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                playing_time_patterns = [
                    r'Playing[_ ]Time[_ ]',  # MultiIndex: "Playing Time_Starts", "Playing_Time_Starts" etc.
                    r'^(MP|Starts|Min|90s|Mn/MP|Min%|Mn/Start|Compl)$',  # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω MP)
                    r'Performance_(Starts|Min|90s)',  # –ò–∑ Goalkeeping: "Performance_Starts"
                    r'Team_Success_',  # Team Success —Å—Ç–æ–ª–±—Ü—ã –∏–∑ Playing Time —Ç–∞–±–ª–∏—Ü—ã
                    r'Subs_',  # Substitution-related columns
                ]

                # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                cols_to_drop = []
                for col in table_data.columns:
                    col_str = str(col)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                    if any(re.search(pattern, col_str, re.IGNORECASE) for pattern in playing_time_patterns):
                        cols_to_drop.append(col)

                if cols_to_drop:
                    table_data = table_data.drop(columns=cols_to_drop)
                    print(f"   –£–¥–∞–ª–µ–Ω–æ {len(cols_to_drop)} —Å—Ç–æ–ª–±—Ü–æ–≤ Playing Time –∏–∑ {table_type}: {cols_to_drop}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–æ–ª–æ–Ω–∫–∞–º (–∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö), –∫–∞–∫ –≤ main.py
            key_columns = ['Season', 'Age', 'Squad', 'Country', 'Comp', 'LgRank', 'MP']
            new_columns = []

            for col in table_data.columns:
                col_str = str(col)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤–æ–π
                is_key = any(key in col_str for key in key_columns)

                # Standard —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã (–∫–∞–∫ –≤ main.py)
                # –î–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π —Ç–∞–∫–∂–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫ goalkeeping –∏ advanced_goalkeeping
                if is_key or table_type in ['standard', 'goalkeeping', 'advanced_goalkeeping']:
                    new_columns.append(col_str)
                else:
                    new_columns.append(f"{col_str}_{table_type}")

            table_data.columns = new_columns

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            table_data = clean_dataframe(table_data)

            if not table_data.empty:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                all_data.append(table_data)

        if not all_data:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è")
            return None

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∫ –≤ main.py)
        print("üîó –û–±—ä–µ–¥–∏–Ω—è—é —Ç–∞–±–ª–∏—Ü—ã...")

        # –ö–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        key_columns = ['Season', 'Age', 'Squad', 'Country', 'Comp']

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        merged_data = all_data[0]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for i in range(1, len(all_data)):
            try:
                # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
                key_columns_present = [col for col in key_columns if col in merged_data.columns and col in all_data[i].columns]

                if key_columns_present:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
                    merged_data = pd.merge(
                        merged_data,
                        all_data[i],
                        on=key_columns_present,
                        how='outer',
                        suffixes=('', '_dup')
                    )
                    print(f"   –û–±—ä–µ–¥–∏–Ω–∏–ª —Ç–∞–±–ª–∏—Ü—É {i+1} –ø–æ –∫–ª—é—á–∞–º: {key_columns_present}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–∏—Ö –∫–ª—é—á–µ–π, –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
                    merged_data = pd.concat([merged_data, all_data[i]], axis=1)
                    print(f"   –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–æ–≤–∞–ª —Ç–∞–±–ª–∏—Ü—É {i+1} –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º")

            except Exception as e:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {i+1}: {e}")
                try:
                    merged_data = pd.concat([merged_data, all_data[i]], axis=1)
                    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {i+1}")
                except Exception as e2:
                    print(f"   ‚ùå –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {i+1}: {e2}")
                    continue

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        print("   –£–¥–∞–ª—è—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã...")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _dup (–¥—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤)
        dup_columns = [col for col in merged_data.columns if str(col).endswith('_dup')]
        if dup_columns:
            merged_data = merged_data.drop(columns=dup_columns, errors='ignore')
            print(f"   –£–¥–∞–ª–µ–Ω–æ {len(dup_columns)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _dup")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        merged_data = merged_data.loc[:, ~merged_data.columns.duplicated()]

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        final_data = clean_final_dataframe_gk(merged_data)

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç—Ä–æ–∫: {len(final_data)}, –°—Ç–æ–ª–±—Ü–æ–≤: {len(final_data.columns)}")

        return final_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {player_name}: {e}")
        return None

def parse_arsenal_goalkeepers(squad_url="https://fbref.com/en/squads/18bb7c10/2025-2026/all_comps/Arsenal-Stats-All-Competitions"):
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal"""
    print("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal...")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    output_dir = "/root/data_platform/test_arsenal_goalkeepers"
    os.makedirs(output_dir, exist_ok=True)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π
    goalkeeper_links = extract_goalkeeper_links(squad_url)

    if not goalkeeper_links:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Ä–∞—Ç–∞—Ä–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return

    successful_parses = 0

    for i, (player_name, player_url) in enumerate(goalkeeper_links):
        print(f"\n{'='*60}")
        print(f"ü•Ö –í—Ä–∞—Ç–∞—Ä—å {i+1}/{len(goalkeeper_links)}: {player_name}")

        # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—Ç–∞—Ä—è
        player_data = parse_goalkeeper_stats(player_name, player_url)

        if player_data is not None and not player_data.empty:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            normalized_name = normalize_name(player_name)
            output_path = os.path.join(output_dir, f"{normalized_name}_goalkeeper_stats.csv")

            try:
                player_data.to_csv(output_path, index=False, encoding='utf-8')
                print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
                successful_parses += 1

                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(player_data)} —Å–µ–∑–æ–Ω–æ–≤, {len(player_data.columns)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {player_name}: {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(goalkeeper_links) - 1:
            time.sleep(2)

    print(f"\nüéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_parses}/{len(goalkeeper_links)} –≤—Ä–∞—Ç–∞—Ä–µ–π")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal —Å FBref.com',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):
    python3 goalkeeper_parser.py

  –ü–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É:
    python3 goalkeeper_parser.py --squad-url "https://fbref.com/en/squads/18bb7c10/Arsenal-Stats"

  –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ:
    python3 goalkeeper_parser.py --url "https://fbref.com/en/players/98ea5115/David-Raya"

–†–µ–∑—É–ª—å—Ç–∞—Ç:
  - CSV —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /root/data_platform/test_arsenal_goalkeepers/
  - –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—Ç–∞—Ä—è –ø–æ –≤—Å–µ–º —Ç—É—Ä–Ω–∏—Ä–∞–º
        """
    )

    parser.add_argument(
        '--squad-url',
        default='https://fbref.com/en/squads/18bb7c10/2025-2026/all_comps/Arsenal-Stats-All-Competitions',
        help='URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π'
    )

    parser.add_argument(
        '--url',
        help='URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤–º–µ—Å—Ç–æ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã)'
    )

    parser.add_argument(
        '-o', '--output',
        help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è)'
    )

    args = parser.parse_args()

    try:
        if args.url:
            # –ü–∞—Ä—Å–∏–º –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è
            print("ü•Ö –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ URL
            if '/players/' in args.url:
                player_id_part = args.url.split('/players/')[1]
                if '/all_comps/' in player_id_part:
                    player_name_part = player_id_part.split('/all_comps/')[1]
                    player_name = player_name_part.split('-Stats')[0].replace('-', ' ')
                else:
                    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π URL
                    parts = player_id_part.split('/')
                    if len(parts) > 1:
                        player_name = parts[-1].replace('-', ' ').split('-Stats')[0]
                    else:
                        player_name = "Goalkeeper"
            else:
                player_name = "Goalkeeper"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç all_comps
            if '/all_comps/' not in args.url:
                print("‚ö†Ô∏è URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '/all_comps/' - –¥–æ–±–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å URL
                if '/players/' in args.url:
                    base_url = args.url.split('/players/')[0]
                    player_part = args.url.split('/players/')[1]
                    player_id = player_part.split('/')[0]
                    normalized_name = player_name.replace(' ', '-')
                    args.url = f"{base_url}/players/{player_id}/all_comps/{normalized_name}-Stats---All-Competitions"

            print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥: {player_name}")
            print(f"üîó URL: {args.url}")

            # –ü–∞—Ä—Å–∏–º –≤—Ä–∞—Ç–∞—Ä—è
            player_data = parse_goalkeeper_stats(player_name, args.url)

            if player_data is not None and not player_data.empty:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                if args.output:
                    output_path = args.output
                else:
                    normalized_name = normalize_name(player_name)
                    output_path = f"/root/data_platform/{normalized_name}_goalkeeper_stats.csv"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                player_data.to_csv(output_path, index=False, encoding='utf-8')
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
                print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(player_data)} —Å–µ–∑–æ–Ω–æ–≤, {len(player_data.columns)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—Ç–∞—Ä—è")
                sys.exit(1)

        else:
            # –ü–∞—Ä—Å–∏–º –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal
            print("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≤—Ä–∞—Ç–∞—Ä–µ–π Arsenal")
            parse_arsenal_goalkeepers(args.squad_url)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
