#!/usr/bin/env python3
"""
Universal Parser v2.0 - CLI entry point for field player statistics

This script provides a command-line interface for parsing field player statistics
from FBref.com using the FieldPlayerParser class from the fbref_parser package.

Supports:
- Individual player parsing
- Full squad parsing
- CSV file fixing
"""

import argparse
import sys

from fbref_parser import FieldPlayerParser
from fbref_parser.core.data_cleaner import clean_aggregated_rows
from fbref_parser.core.column_processor import fix_column_names
from fbref_parser.constants import DEFAULT_ARSENAL_SQUAD_URL
import pandas as pd


def fix_existing_csv(input_file, output_file=None):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º CSV —Ñ–∞–π–ª–µ"""
    if output_file is None:
        output_file = input_file.replace('.csv', '_fixed.csv')

    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ: {input_file}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª
        df = pd.read_csv(input_file)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        problem_cols = [col for col in df.columns[:10] if 'Unnamed:' in str(col)]
        if problem_cols:
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫:")
            for col in problem_cols[:5]:
                print(f"  - {col}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        print("\n‚ú® –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...")
        new_column_names = fix_column_names(df.columns)
        df.columns = new_column_names

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        print("\n‚úÖ –ù–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:")
        for new in new_column_names[:10]:
            print(f"  - {new}")

        # –û—á–∏—â–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        print("\nüßπ –£–¥–∞–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏...")
        original_rows = len(df)
        df = clean_aggregated_rows(df)
        removed_rows = original_rows - len(df)

        if removed_rows > 0:
            print(f"  –£–¥–∞–ª–µ–Ω–æ {removed_rows} –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
        else:
            print("  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –û–±—Ä–∞–∑–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        sample_cols = ['Season', 'Squad', 'Comp']
        available_cols = [col for col in sample_cols if col in df.columns]

        if available_cols:
            print(df[available_cols].head(5).to_string(index=False))
        else:
            print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏:")
            print(df.iloc[:5, :3].to_string(index=False))

        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return df

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å FBref',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                              # –ü–∞—Ä—Å–∏–Ω–≥ William Saliba (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  %(prog)s --squad arsenal              # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ Arsenal
  %(prog)s --squad arsenal --limit 5    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5 –∏–≥—Ä–æ–∫–æ–≤ Arsenal
  %(prog)s --squad-url "URL"            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É URL
  %(prog)s --fix file.csv               # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CSV —Ñ–∞–π–ª–∞
  %(prog)s --fix file.csv -o fixed.csv  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
    )

    parser.add_argument('--fix',
                       help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º CSV —Ñ–∞–π–ª–µ')
    parser.add_argument('-o', '--output',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ CSV (—Ç–æ–ª—å–∫–æ —Å --fix)')

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--squad-url',
                       help='URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤')
    parser.add_argument('--squad',
                       choices=['arsenal'],
                       help='–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (arsenal)')
    parser.add_argument('--limit',
                       type=int,
                       help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')
    parser.add_argument('--delay',
                       type=int,
                       default=4,
                       help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)')

    args = parser.parse_args()

    if args.fix:
        # –†–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CSV
        if args.output:
            result = fix_existing_csv(args.fix, args.output)
        else:
            result = fix_existing_csv(args.fix)

        if result is not None:
            print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {args.fix} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            print(f"\nüí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {args.fix} –Ω–µ —É–¥–∞–ª–æ—Å—å.")
            sys.exit(1)

    elif args.squad or args.squad_url:
        # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
        squad_url = None

        if args.squad == 'arsenal':
            squad_url = DEFAULT_ARSENAL_SQUAD_URL
        elif args.squad_url:
            squad_url = args.squad_url

        if squad_url:
            # Use FieldPlayerParser for squad parsing
            field_parser = FieldPlayerParser()
            result = field_parser.parse_squad(
                squad_url=squad_url,
                limit=args.limit,
                delay=args.delay
            )

            if result > 0:
                print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result} –∏–≥—Ä–æ–∫–æ–≤.")
            else:
                print("\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–¥–∞–ª—Å—è.")
                sys.exit(1)
        else:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URL –∫–æ–º–∞–Ω–¥—ã")
            sys.exit(1)

    else:
        # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å FBref (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - William Saliba)
        player_url = "https://fbref.com/en/players/972aeb2a/all_comps/William-Saliba-Stats---All-Competitions"
        field_parser = FieldPlayerParser()
        result = field_parser.parse_player(player_url=player_url)

        if result is not None:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ß–∏—Å—Ç—ã–π CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω.")
        else:
            print("\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.")
            sys.exit(1)


if __name__ == "__main__":
    main()
