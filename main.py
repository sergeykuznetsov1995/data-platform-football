#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö William Saliba —Å FBref
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–∞–π—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö CSV —Ñ–∞–π–ª–æ–≤
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import time
import re
import numpy as np
from io import StringIO
import argparse
import sys
import os

def fix_column_names(columns):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫, —É–±–∏—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ Unnamed: –ø—Ä–µ—Ñ–∏–∫—Å—ã"""
    new_columns = []

    for col in columns:
        col_str = str(col)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å "Unnamed: X_level_0_"
        if col_str.startswith('Unnamed:') and '_level_0_' in col_str:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            clean_name = col_str.split('_')[-1]
            new_columns.append(clean_name)
        else:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            new_columns.append(col_str)

    return new_columns

def clean_dataframe(df):
    """–û—á–∏—Å—Ç–∫–∞ DataFrame –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if df.empty:
        return df

    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Matches
    matches_cols = [col for col in df.columns if 'Matches' in str(col) or 'matches' in str(col).lower()]
    df = df.drop(columns=matches_cols, errors='ignore')

    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
    season_cols = [col for col in df.columns if 'Season' in str(col)]
    if season_cols:
        season_col = season_cols[0]

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        # –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        df = df[~df[season_col].astype(str).str.contains('Season|Seasons|Club|Clubs|Total|League', na=False)]

        # –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Å–µ–∑–æ–Ω–∞
        # –û—Å—Ç–∞–≤–ª—è–µ–º –í–°–ï —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–µ–∑–æ–Ω–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏/—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º–∏
    comp_cols = [col for col in df.columns if 'Comp' in str(col) and 'Competition' not in str(col)]
    if comp_cols:
        comp_col = comp_cols[0]
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        df = df[~df[comp_col].astype(str).str.contains('Comp|Competition|Country|Squad|MP|Min', na=False)]

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df.dropna(how='all')

    return df

def clean_aggregated_rows(df):
    """–£–¥–∞–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if df.empty:
        return df

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–æ–±—ã—á–Ω–æ Season –∏–ª–∏ –ø—É—Å—Ç–∞—è)
    first_col = df.iloc[:, 0]

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
    # –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "Country" (–ø—Ä–∏–∑–Ω–∞–∫ –º—É—Å–æ—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
    if len(df.columns) >= 4:
        fourth_col = df.iloc[:, 3]  # Country –∫–æ–ª–æ–Ω–∫–∞

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        rows_to_drop = []
        for i, (first_val, fourth_val) in enumerate(zip(first_col, fourth_col)):
            first_str = str(first_val).strip()
            fourth_str = str(fourth_val).strip()

            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è –ò —á–µ—Ç–≤–µ—Ä—Ç–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç "Country"
            if (first_str == '' or first_str == 'nan') and fourth_str == 'Country':
                rows_to_drop.append(i)

        # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.drop(rows_to_drop)

    return df

def clean_final_dataframe(df):
    """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ DataFrame –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã 90s
    print("   –£–¥–∞–ª—è—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã 90s...")
    duplicate_90s_cols = [col for col in df.columns if col in [
        '90s_shooting', '90s_passing', '90s_pass_types',
        '90s_defense', '90s_gca', '90s_possession', '90s_misc'
    ]]
    df = df.drop(columns=duplicate_90s_cols)
    print(f"   –£–¥–∞–ª–µ–Ω–æ {len(duplicate_90s_cols)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–æ–ª–±—Ü–æ–≤ 90s")

    # 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ snake_case
    print("   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã...")
    basic_renames = {
        'Season': 'season',
        'Age': 'age',
        'Squad': 'squad',
        'Country': 'country',
        'Comp': 'competition',
    }
    df = df.rename(columns=basic_renames)

    # 3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ Playing Time —Å—Ç–æ–ª–±—Ü—ã
    print("   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é Playing Time —Å—Ç–æ–ª–±—Ü—ã...")
    pt_renames = {
        # –ë–∞–∑–æ–≤—ã–µ Playing Time —Å—Ç–æ–ª–±—Ü—ã (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ playing_time —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
        'MP_playing_time': 'matches_played',
        'Playing Time_MP_playing_time': 'matches_played',
        'Starts_playing_time': 'starts',
        'Playing Time_Starts_playing_time': 'starts',
        'Min_playing_time': 'minutes',
        'Playing Time_Min_playing_time': 'minutes',
        '90s_playing_time': 'minutes_90',
        'Playing Time_90s_playing_time': 'minutes_90',
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ Playing Time —Å—Ç–æ–ª–±—Ü—ã
        'Playing Time_Mn/MP': 'minutes_per_match',
        'Mn/MP_playing_time': 'minutes_per_match',
        'Playing Time_Mn/MP_playing_time': 'minutes_per_match',
        'Playing Time_Min%_playing_time': 'minutes_pct',
        'Min%_playing_time': 'minutes_pct',
        'Starts_Starts_playing_time': 'starts_total',
        'Starts_Mn/Start_playing_time': 'minutes_per_start',
        'Mn/Start_playing_time': 'minutes_per_start',
        'Starts_Compl': 'matches_completed',
        'Compl_playing_time': 'matches_completed',
        'Starts_Compl_playing_time': 'matches_completed',
        'Subs_Subs_playing_time': 'subs_on',
        'Subs_playing_time': 'subs_on',
        'Subs_Mn/Sub_playing_time': 'minutes_per_sub',
        'Mn/Sub_playing_time': 'minutes_per_sub',
        'Subs_unSub_playing_time': 'subs_unused',
        'unSub_playing_time': 'subs_unused',
        'Team Success_PPM_playing_time': 'team_points_per_match',
        'PPM_playing_time': 'team_points_per_match',
        'Team Success_onG_playing_time': 'team_goals_for',
        'onG_playing_time': 'team_goals_for',
        'Team Success_onGA_playing_time': 'team_goals_against',
        'onGA_playing_time': 'team_goals_against',
        'Team Success_+/-_playing_time': 'team_goal_diff',
        '+/-_playing_time': 'team_goal_diff',
        'Team Success_+/-90_playing_time': 'team_goal_diff_per90',
        '+/-90_playing_time': 'team_goal_diff_per90',
        'Team Success_On-Off_playing_time': 'team_on_off',
        'On-Off_playing_time': 'team_on_off',
        'Team Success (xG)_onxG_playing_time': 'team_xg_for',
        'onxG_playing_time': 'team_xg_for_xg',
        'Team Success (xG)_onxGA_playing_time': 'team_xg_against',
        'onxGA_playing_time': 'team_xg_against_xg',
        'Team Success (xG)_xG+/-_playing_time': 'team_xg_diff',
        'xG+/-_playing_time': 'team_xg_diff',
        'Team Success (xG)_xG+/-90_playing_time': 'team_xg_diff_per90',
        'xG+/-90_playing_time': 'team_xg_diff_per90',
        'Team Success (xG)_On-Off_playing_time': 'team_xg_on_off'
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ DataFrame
    existing_pt_renames = {old: new for old, new in pt_renames.items() if old in df.columns}
    df = df.rename(columns=existing_pt_renames)
    print(f"   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {len(existing_pt_renames)} Playing Time —Å—Ç–æ–ª–±—Ü–æ–≤")

    # 4. –°–æ–∫—Ä–∞—â–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∞–±–ª–∏—Ü
    print("   –°–æ–∫—Ä–∞—â–∞—é —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∞–±–ª–∏—Ü...")
    suffix_map = {
        '_shooting': '_sh',
        '_passing': '_pass',
        '_pass_types': '_pt',
        '_defense': '_def',
        '_possession': '_poss',
        '_misc': '_misc',
        '_gca': '_gca'
    }

    new_columns = []
    for col in df.columns:
        new_col = col
        for old_suffix, new_suffix in suffix_map.items():
            if col.endswith(old_suffix):
                new_col = col.replace(old_suffix, new_suffix)
                break
        new_columns.append(new_col)

    df.columns = new_columns

    # 5. –ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ snake_case –∏ –∑–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    print("   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ snake_case...")

    def convert_to_snake_case(column_name):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø–æ–ª–Ω—ã–π snake_case —Å –∑–∞–º–µ–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        col = str(column_name)

        # –ó–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        col = col.replace('%', '_pct')
        col = col.replace('+', '_plus_')
        col = col.replace('-', '_minus_')
        col = col.replace('/', '_per_')
        col = col.replace('(', '_')
        col = col.replace(')', '_')
        col = col.replace(' ', '_')
        col = col.replace('&', '_and_')
        col = col.replace('#', '_num_')

        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        col = re.sub(r'_+', '_', col)

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        col = col.strip('_')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lowercase
        col = col.lower()

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        replacements = {
            'g_plus_a': 'goals_plus_assists',
            'g_minus_pk': 'goals_minus_penalties',
            'npxg_plus_xag': 'npxg_plus_xag',
            'g_plus_a_minus_pk': 'goals_plus_assists_minus_penalties',
            'per_90_minutes': 'per_90',
            'gca_types': 'gca_types',
            'sca_types': 'sca_types',
            'aerial_duels': 'aerial_duels',
            'def_3rd': 'def_third',
            'mid_3rd': 'mid_third',
            'att_3rd': 'att_third',
            'def_pen': 'def_penalty_area',
            'att_pen': 'att_penalty_area',
            'take_minus_ons': 'takeons',
            'team_success': 'team_success',
            'mn_per_mp': 'minutes_per_match',
            'min_pct': 'minutes_pct',
            'mn_per_start': 'minutes_per_start',
            'mn_per_sub': 'minutes_per_sub'
        }

        for old, new in replacements.items():
            col = col.replace(old, new)

        return col

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º
    new_column_names = [convert_to_snake_case(col) for col in df.columns]
    df.columns = new_column_names

    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(df.columns)} –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ snake_case")

    # 6. –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("   –û—á–∏—â–∞—é –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")

    # –û—á–∏—â–∞–µ–º Country (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "eng ENG" -> "ENG")
    if 'country' in df.columns:
        df['country'] = df['country'].astype(str).str.replace(r'^[a-z]+ ', '', regex=True)
        df['country'] = df['country'].replace('nan', '')

    # –û—á–∏—â–∞–µ–º Competition (—É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ª–∏–≥ —Ç–∏–ø–∞ "1. Ligue 1" -> "Ligue 1")
    if 'competition' in df.columns:
        df['competition'] = df['competition'].astype(str).str.replace(r'^\d+\. ', '', regex=True)
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        df['competition'] = df['competition'].str.replace('Jr. PL2 ‚Äî Div. 1', 'PL2 Div 1')

    print(f"‚úÖ –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    return df

def find_tables_by_unique_markers(all_page_tables, missing_tables):
    """
    –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–∞—Ä–∫–µ—Ä–∞–º –∫–æ–ª–æ–Ω–æ–∫
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏
    """

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å)
    UNIQUE_MARKERS = {
        'gca': ['gca', 'sca90', 'goal creation', 'shot creation'],  # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        'possession': ['touches', 'carries', 'take-ons', 'dribbles'],
        'misc': ['recov', 'aerial', 'fls', 'fld'],
        'playing_time': ['starts', 'mn/start', 'compl', 'min%'],
        'defense': ['tkl', 'tkl+int', 'blocks', 'challenges'],
        'pass_types': ['live', 'dead', 'fk', 'tb'],  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ Pass Types
        'passing': ['cmp', 'att', 'cmp%', 'totdist'],
        'shooting': ['sh', 'sot', 'sot%', 'g/sh'],
        'standard': ['gls', 'ast', 'g+a', 'pk']
    }

    found_tables = {}

    for table_name in missing_tables:
        if table_name not in UNIQUE_MARKERS:
            continue

        markers = UNIQUE_MARKERS[table_name]
        candidates = []

        # –ò—â–µ–º –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º
        for i, table in enumerate(all_page_tables):
            if len(table) < 10:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                continue

            cols_str = str(table.columns).lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            marker_count = sum(1 for marker in markers if marker in cols_str)

            if marker_count >= 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –º–∞—Ä–∫–µ—Ä–∞
                candidates.append((i, table, marker_count, len(table)))

        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Ç–∞–±–ª–∏—Ü—É (–±–æ–ª—å—à–µ –º–∞—Ä–∫–µ—Ä–æ–≤, –±–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫)
        if candidates:
            best = max(candidates, key=lambda x: (x[2], x[3]))  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º, –ø–æ—Ç–æ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            found_tables[table_name] = (best[0], best[1])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table_name.upper()} #{best[0]} –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º ({best[2]} –º–∞—Ä–∫–µ—Ä–æ–≤, {best[3]} —Å—Ç—Ä–æ–∫)")

    return found_tables

def score_table_quality(table, table_type, markers):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —Ç–∏–ø—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 100
    """
    cols_str = str(table.columns).lower()
    score = 0

    # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
    marker_matches = sum(1 for marker in markers if marker in cols_str)
    score += marker_matches * 20  # –î–æ 80 –±–∞–ª–ª–æ–≤ –∑–∞ –º–∞—Ä–∫–µ—Ä—ã

    # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if table_type == 'gca' and ('gca' in cols_str or 'sca' in cols_str):
        score += 15
    elif table_type == 'pass_types' and ('pass types' in cols_str):
        score += 15
    elif table_type == 'possession' and ('possession' in cols_str):
        score += 15

    # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã (–±–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫ = –ª—É—á—à–µ)
    size_bonus = min(len(table) / 50 * 5, 10)  # –î–æ 10 –±–∞–ª–ª–æ–≤
    score += size_bonus

    # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if len(table) < 15:
        score -= 20

    return min(score, 100)

def resolve_table_conflict(existing_name, existing_table, new_name, new_table, position):
    """
    –†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∫–æ–≥–¥–∞ –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ—Ç–µ–Ω–¥—É—é—Ç –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤—ã–±—Ä–∞–Ω–Ω–æ–µ_–∏–º—è, –≤—ã–±—Ä–∞–Ω–Ω–∞—è_—Ç–∞–±–ª–∏—Ü–∞, –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ_–∏–º—è)
    """

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å find_tables_by_unique_markers)
    UNIQUE_MARKERS = {
        'gca': ['gca', 'sca90', 'goal creation', 'shot creation'],  # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        'possession': ['touches', 'carries', 'take-ons', 'dribbles'],
        'misc': ['recov', 'aerial', 'fls', 'fld'],
        'playing_time': ['starts', 'mn/start', 'compl', 'min%'],
        'defense': ['tkl', 'tkl+int', 'blocks', 'challenges'],
        'pass_types': ['live', 'dead', 'fk', 'tb'],  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ Pass Types
        'passing': ['cmp', 'att', 'cmp%', 'totdist'],
        'shooting': ['sh', 'sot', 'sot%', 'g/sh'],
        'standard': ['gls', 'ast', 'g+a', 'pk']
    }

    existing_markers = UNIQUE_MARKERS.get(existing_name, [])
    new_markers = UNIQUE_MARKERS.get(new_name, [])

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
    existing_score = score_table_quality(existing_table, existing_name, existing_markers)
    new_score = score_table_quality(new_table, new_name, new_markers)

    print(f"üîç –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–∏ #{position}: {existing_name}({existing_score:.0f}) vs {new_name}({new_score:.0f})")

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ª—É—á—à–µ–π –æ—Ü–µ–Ω–∫–æ–π
    if new_score > existing_score:
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ {new_name} (–ª—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞)")
        return new_name, new_table, existing_name
    else:
        print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–∞ {existing_name} (–ª—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞)")
        return existing_name, existing_table, new_name

def analyze_all_tables(all_page_tables):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö {len(all_page_tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")

    for i, table in enumerate(all_page_tables):
        if len(table) < 5:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            continue

        print(f"\n=== –¢–∞–±–ª–∏—Ü–∞ #{i} ===")
        print(f"–†–∞–∑–º–µ—Ä: {len(table)} —Å—Ç—Ä–æ–∫ √ó {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
        cols = []
        for col in table.columns[:10]:
            if isinstance(col, tuple):
                clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                cols.append(clean_col)
            else:
                cols.append(str(col))

        print(f"–ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {cols}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã
        cols_str = str(table.columns).lower()
        possible_types = []

        if ('season' in cols_str or 'squad' in cols_str) and 'gls' in cols_str and 'ast' in cols_str:
            possible_types.append("STANDARD")
        if 'shooting' in cols_str or ('sh' in cols_str and 'sot' in cols_str):
            possible_types.append("SHOOTING")
        if 'passing' in cols_str or ('cmp' in cols_str and 'att' in cols_str):
            possible_types.append("PASSING")
        if 'pass types' in cols_str or 'live' in cols_str:
            possible_types.append("PASS_TYPES")
        if any(marker in cols_str for marker in ['gca', 'sca', 'goal creation', 'shot creation', 'gca90', 'sca90', 'passlive', 'passdead']):
            possible_types.append("GCA/SCA")
        if 'defense' in cols_str or 'tkl' in cols_str:
            possible_types.append("DEFENSE")
        if any(marker in cols_str for marker in ['possession', 'touches', 'carries', 'take-ons', 'dribbles', 'targ', 'succ', 'tkld', 'totdist', 'prgdist']):
            possible_types.append("POSSESSION")
        if 'playing time' in cols_str or 'starts' in cols_str:
            possible_types.append("PLAYING_TIME")
        if any(marker in cols_str for marker in ['misc', 'fls', 'fld', 'off', 'crs', 'tklw', 'pkwon', 'pkcon', 'og', 'recov', 'aerial', 'won', 'lost']):
            possible_types.append("MISCELLANEOUS")

        if possible_types:
            print(f"–í–æ–∑–º–æ–∂–Ω—ã–π —Ç–∏–ø: {', '.join(possible_types)}")
        else:
            print("–¢–∏–ø: –ù–ï–û–ü–û–ó–ù–ê–ù–ù–ê–Ø")

def fix_existing_csv(input_file, output_file=None):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º CSV —Ñ–∞–π–ª–µ"""
    if output_file is None:
        output_file = input_file.replace('.csv', '_fixed.csv')

    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ: {input_file}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª
        df = pd.read_csv(input_file)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        problem_cols = [col for col in df.columns[:10] if 'Unnamed:' in str(col)]
        if problem_cols:
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫:")
            for col in problem_cols[:5]:
                print(f"  - {col}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        print("\n‚ú® –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...")
        new_column_names = fix_column_names(df.columns)
        df.columns = new_column_names

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        print("\n‚úÖ –ù–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:")
        for new in new_column_names[:10]:
            print(f"  - {new}")

        # –û—á–∏—â–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        print("\nüßπ –£–¥–∞–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏...")
        original_rows = len(df)
        df = clean_aggregated_rows(df)
        removed_rows = original_rows - len(df)

        if removed_rows > 0:
            print(f"  –£–¥–∞–ª–µ–Ω–æ {removed_rows} –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
        else:
            print("  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –û–±—Ä–∞–∑–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        sample_cols = ['Season', 'Squad', 'Comp']
        available_cols = [col for col in sample_cols if col in df.columns]

        if available_cols:
            print(df[available_cols].head(5).to_string(index=False))
        else:
            print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏:")
            print(df.iloc[:5, :3].to_string(index=False))

        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return df

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def scrape_all_competitions_table(soup, table_id, table_name):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏"""
    print(f"–ü–∞—Ä—Å–∏–Ω–≥ {table_name} (ID: {table_id})...")

    table = soup.find('table', {'id': table_id})
    if not table:
        print(f"–¢–∞–±–ª–∏—Ü–∞ {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return pd.DataFrame()

    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É
        tables = pd.read_html(StringIO(str(table)), header=[0,1])
        if not tables:
            return pd.DataFrame()

        df = tables[0]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if isinstance(df.columns, pd.MultiIndex):
            new_columns = []
            for col in df.columns:
                if isinstance(col, tuple):
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —É—Ä–æ–≤–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                    clean_col = re.sub(r'_+', '_', clean_col).strip('_')
                else:
                    clean_col = str(col)
                new_columns.append(clean_col)
            df.columns = new_columns

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å "Unnamed:"
        df.columns = fix_column_names(df.columns)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–æ–ª–æ–Ω–∫–∞–º (–∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö)
        key_columns = ['Season', 'Age', 'Squad', 'Country', 'Comp', 'LgRank', 'MP']
        new_columns = []

        for col in df.columns:
            col_str = str(col)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤–æ–π
            is_key = any(key in col_str for key in key_columns)

            if is_key or table_name == 'standard':
                new_columns.append(col_str)
            else:
                new_columns.append(f"{col_str}_{table_name}")

        df.columns = new_columns

        # –û—á–∏—â–∞–µ–º DataFrame
        df = clean_dataframe(df)

        print(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_name}")
        return df

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {table_name}: {e}")
        return pd.DataFrame()

def extract_player_name_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ URL FBref"""
    match = re.search(r'/([^/]+)-Stats', url)
    if match:
        return match.group(1).replace('-', ' ')
    return "unknown_player"

def normalize_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª–µ"""
    clean_name = re.sub(r'[^\w\s-]', '', name.strip())
    clean_name = re.sub(r'[\s-]+', '_', clean_name)
    return clean_name.lower()

def build_player_url(player_id, player_name=None):
    """–°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ FBref"""
    if not player_name:
        player_name = "Player"
    url_name = player_name.replace(' ', '-')
    return f"https://fbref.com/en/players/{player_id}/all_comps/{url_name}-Stats---All-Competitions"

def extract_player_links_from_squad(squad_url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã"""
    print(f"üîç –ò–∑–≤–ª–µ–∫–∞—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å: {squad_url}")

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        response = requests.get(squad_url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')

        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        all_tables = soup.find_all('table')

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        standard_stats_table = soup.find('table', {'id': 'all_stats_standard'})

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É ID, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if not standard_stats_table:
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ID - –Ω–∞—á–∏–Ω–∞–µ–º —Å –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö
            alternative_ids = ['stats_standard_9', 'stats_standard', 'stats_standard_combined']
            for alt_id in alternative_ids:
                standard_stats_table = soup.find('table', {'id': alt_id})
                if standard_stats_table:
                    break

            # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if not standard_stats_table:
                for table in all_tables:
                    headers = table.find_all(['th', 'td'])
                    header_text = ' '.join([h.get_text().strip() for h in headers[:10]])
                    if any(keyword in header_text.lower() for keyword in ['player', 'nation', 'pos', 'age', 'mp', 'starts']):
                        standard_stats_table = table
                        break

        if not standard_stats_table:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return []

        player_links = []

        # –ü—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        tables_to_check = [standard_stats_table]

        # –ï—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–ª—å–∫–æ –≤—Ä–∞—Ç–∞—Ä–∏, –ø—Ä–æ–≤–µ—Ä–∏–º –í–°–ï —Ç–∞–±–ª–∏—Ü—ã
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for table in all_tables:
            table_id = table.get('id', '')
            if table_id and table_id not in [t.get('id', '') for t in tables_to_check]:
                if any(keyword in table_id for keyword in ['stats_', 'standard', 'shooting', 'passing', 'defense']):
                    tables_to_check.append(table)

        for table_idx, table in enumerate(tables_to_check):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∏–∑ tbody
            tbody = table.find('tbody')
            if not tbody:
                continue

            found_in_table = 0

            for row in tbody.find_all('tr'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                if 'thead' in row.get('class', []):
                    continue

                cells = row.find_all(['td', 'th'])
                if len(cells) < 4:  # –ú–∏–Ω–∏–º—É–º –∫–æ–ª–æ–Ω–æ–∫: –ò–≥—Ä–æ–∫, –ù–∞—Ü–∏—è, –ü–æ–∑–∏—Ü–∏—è, –í–æ–∑—Ä–∞—Å—Ç
                    continue

                # –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ —Å—Å—ã–ª–∫—É
                player_cell = cells[0]

                # –ü–æ–∑–∏—Ü–∏—è –æ–±—ã—á–Ω–æ –≤ 3-–π –∫–æ–ª–æ–Ω–∫–µ (–∏–Ω–¥–µ–∫—Å 2)
                position_cell = cells[2] if len(cells) > 2 else None
                position = position_cell.get_text(strip=True) if position_cell else ""

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—Ç–∞—Ä–µ–π
                if 'GK' in position.upper():
                    continue

                # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä–æ–∫–∞
                player_link = player_cell.find('a')
                if player_link and player_link.get('href'):
                    href = player_link.get('href')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä–æ–∫–∞
                    if '/players/' in href:
                        player_name = player_cell.get_text(strip=True)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if any(existing_name == player_name for existing_name, _ in player_links):
                            continue

                        full_url = f"https://fbref.com{href}"

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ URL –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
                        if not '/all_comps/' in full_url:
                            # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π URL –Ω–∞ URL –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
                            parts = href.split('/')
                            if len(parts) >= 4:
                                player_id = parts[3]
                                player_url_name = parts[4] if len(parts) > 4 else player_name.replace(' ', '-')
                                full_url = f"https://fbref.com/en/players/{player_id}/all_comps/{player_url_name}-Stats---All-Competitions"

                        player_links.append((player_name, full_url))
                        found_in_table += 1

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
            if len(player_links) >= 25:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                break

        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(player_links)} –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤")
        return player_links

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
        return []

def parse_arsenal_squad(squad_url=None, limit=None, delay=4):
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã Arsenal"""
    if squad_url is None:
        squad_url = "https://fbref.com/en/squads/18bb7c10/2023-2024/Arsenal-Stats"

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã Arsenal...")
    print(f"üìç URL –∫–æ–º–∞–Ω–¥—ã: {squad_url}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    player_links = extract_player_links_from_squad(squad_url)

    if not player_links:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞")
        return None

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if limit and limit > 0:
        player_links = player_links[:limit]
        print(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –±—É–¥–µ—Ç —Å–ø–∞—Ä—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(player_links)} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ {len(player_links)}")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = "/root/data_platform/test_arsenal_players"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

    successful_parses = 0
    failed_parses = 0

    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(player_links)} –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...")

    for i, (player_name, player_url) in enumerate(player_links, 1):
        print(f"\nüìä –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ {i}/{len(player_links)}: {player_name}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é parse_from_fbref —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
            result = parse_from_fbref(
                player_url=player_url,
                player_name=player_name,
                output_path=None,
                simple_filename=True
            )

            if result is not None:
                successful_parses += 1
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω: {player_name}")
            else:
                failed_parses += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {player_name}")

        except Exception as e:
            failed_parses += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {player_name}: {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
        if i < len(player_links):
            print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã Arsenal –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {successful_parses} –∏–≥—Ä–æ–∫–æ–≤")
    print(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {failed_parses} –∏–≥—Ä–æ–∫–æ–≤")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

    return successful_parses

def parse_from_fbref(player_url=None, player_name=None, output_path=None, simple_filename=False):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å FBref"""

    if not player_name and player_url:
        player_name = extract_player_name_from_url(player_url)
    if not player_name:
        player_name = "William Saliba"

    if not player_url:
        player_url = "https://fbref.com/en/players/972aeb2a/all_comps/William-Saliba-Stats---All-Competitions"

    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {player_name}...")

    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    url = player_url

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        print("üì• –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')

        # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º pandas.read_html –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        print("üîç –ò—â—É –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            all_page_tables = pd.read_html(StringIO(response.content.decode('utf-8')), header=[0,1])

            print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_page_tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            key_tables = {}

            for i, table in enumerate(all_page_tables):
                if len(table) < 10 or len(table.columns) < 10:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    continue

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã
                cols_str = str(table.columns).lower()

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
                if ('season' in cols_str or 'squad' in cols_str) and 'gls' in cols_str and 'ast' in cols_str:
                    if 'standard' not in key_tables:
                        key_tables['standard'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ STANDARD #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –£–¥–∞—Ä—ã
                elif 'shooting' in cols_str or ('sh' in cols_str and 'sot' in cols_str):
                    if 'shooting' not in key_tables:
                        key_tables['shooting'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ SHOOTING #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –ü–µ—Ä–µ–¥–∞—á–∏
                elif 'passing' in cols_str or ('cmp' in cols_str and 'att' in cols_str):
                    if 'passing' not in key_tables:
                        key_tables['passing'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ PASSING #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –¢–∏–ø—ã –ø–µ—Ä–µ–¥–∞—á
                elif 'pass types' in cols_str or 'live' in cols_str:
                    if 'pass_types' not in key_tables:
                        key_tables['pass_types'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ PASS TYPES #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ–≤ –∏ —É–¥–∞—Ä–æ–≤
                elif any(marker in cols_str for marker in ['gca', 'sca', 'goal creation', 'shot creation', 'gca90', 'sca90', 'passlive', 'passdead']):
                    if 'gca' not in key_tables:
                        key_tables['gca'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ GCA/SCA #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –ó–∞—â–∏—Ç–∞
                elif 'defense' in cols_str or 'tkl' in cols_str:
                    if 'defense' not in key_tables:
                        key_tables['defense'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ DEFENSE #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –ò–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –†–ê–ù–¨–®–ï possession —Å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏)
                elif any(marker in cols_str for marker in ['mn/mp', 'min%', 'team success', 'ppm']) and 'touches' not in cols_str:
                    if 'playing_time' not in key_tables:
                        key_tables['playing_time'] = (i, table)
                        first_cols = [str(col) for col in table.columns[:5]]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ PLAYING TIME #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                        print(f"   –ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {first_cols}")

                # –í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å touches)
                elif 'touches' in cols_str and any(marker in cols_str for marker in ['def pen', 'def 3rd', 'mid 3rd', 'att 3rd', 'dribbles']):
                    if 'possession' not in key_tables:
                        key_tables['possession'] = (i, table)
                        first_cols = [str(col) for col in table.columns[:5]]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ POSSESSION #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                        print(f"   –ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {first_cols}")

                # –†–∞–∑–Ω–æ–µ
                elif any(marker in cols_str for marker in ['misc', 'fls', 'fld', 'off', 'crs', 'tklw', 'pkwon', 'pkcon', 'og', 'recov', 'aerial', 'won', 'lost']):
                    if 'misc' not in key_tables:
                        key_tables['misc'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ MISC #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

            # Fallback-–º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
            expected_tables = ['standard', 'shooting', 'passing', 'pass_types', 'gca', 'defense', 'possession', 'playing_time', 'misc']
            missing_tables = [t for t in expected_tables if t not in key_tables]

            if missing_tables and len(key_tables) >= 6:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã 6 —Ç–∞–±–ª–∏—Ü
                print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(key_tables)} —Ç–∞–±–ª–∏—Ü –∏–∑ {len(expected_tables)} –æ–∂–∏–¥–∞–µ–º—ã—Ö")
                print(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                print("–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–∞—Ä–∫–µ—Ä–∞–º...")

                # –ü–æ–∏—Å–∫ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–∞—Ä–∫–µ—Ä–∞–º –∫–æ–ª–æ–Ω–æ–∫
                found_by_markers = find_tables_by_unique_markers(all_page_tables, missing_tables)

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                rejected_tables = []  # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                for table_name, (pos, table) in found_by_markers.items():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ–∑–∏—Ü–∏–π
                    conflict_name = None
                    for existing_name, (existing_pos, existing_table) in key_tables.items():
                        if existing_pos == pos:
                            conflict_name = existing_name
                            break

                    if conflict_name:
                        # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Ç–∞–±–ª–∏—Ü—É
                        chosen_name, chosen_table, rejected_name = resolve_table_conflict(
                            conflict_name, key_tables[conflict_name][1],
                            table_name, table,
                            pos
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º key_tables —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
                        if chosen_name == table_name:
                            # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª—É—á—à–µ - –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é
                            del key_tables[conflict_name]
                            key_tables[table_name] = (pos, chosen_table)
                            rejected_tables.append(rejected_name)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—É—é
                        else:
                            # –°—Ç–∞—Ä–∞—è –ª—É—á—à–µ - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—É—é –Ω–æ–≤—É—é
                            rejected_tables.append(rejected_name)
                    else:
                        # –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                        key_tables[table_name] = (pos, table)

                # –ü–æ–∏—Å–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
                if rejected_tables:
                    print(f"\nüîÑ –ò—â—É –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö: {rejected_tables}")
                    for rejected_table in rejected_tables:
                        found_alternatives = find_tables_by_unique_markers(all_page_tables, [rejected_table])

                        for alt_name, (alt_pos, alt_table) in found_alternatives.items():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω–∞
                            pos_occupied = any(existing_pos == alt_pos for existing_name, (existing_pos, existing_table) in key_tables.items())
                            if not pos_occupied:
                                key_tables[alt_name] = (alt_pos, alt_table)
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {alt_name} #{alt_pos}")
                                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
            final_missing = [t for t in expected_tables if t not in key_tables]

            if final_missing:
                print(f"\n‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {', '.join(final_missing)}")
                print("–ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
                analyze_all_tables(all_page_tables)

            if not key_tables:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–ª—é—á–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
                return None

            print(f"\nüîó –ù–∞–π–¥–µ–Ω–æ {len(key_tables)} –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            processed_tables = {}

            for table_name, (table_idx, table) in key_tables.items():
                print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É {table_name}...")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if isinstance(table.columns, pd.MultiIndex):
                    new_columns = []
                    for col in table.columns:
                        if isinstance(col, tuple):
                            clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                            clean_col = re.sub(r'_+', '_', clean_col).strip('_')
                        else:
                            clean_col = str(col)
                        new_columns.append(clean_col)
                    table.columns = new_columns

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å "Unnamed:"
                table.columns = fix_column_names(table.columns)

                # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã Playing Time –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ playing_time)
                if table_name != 'playing_time':
                    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Playing Time —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ MultiIndex –∏ –æ–±—ã—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    playing_time_patterns = [
                        r'Playing[_ ]Time[_ ]',  # MultiIndex: "Playing Time_Starts", "Playing_Time_Starts" etc.
                        r'^(MP|Starts|Min|90s|Mn/MP|Min%|Mn/Start|Compl)$',  # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        r'Team_Success_',  # Team Success —Å—Ç–æ–ª–±—Ü—ã –∏–∑ Playing Time —Ç–∞–±–ª–∏—Ü—ã
                        r'Subs_',  # Substitution-related columns
                    ]

                    # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                    cols_to_drop = []
                    for col in table.columns:
                        col_str = str(col)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                        if any(re.search(pattern, col_str, re.IGNORECASE) for pattern in playing_time_patterns):
                            cols_to_drop.append(col)

                    if cols_to_drop:
                        table = table.drop(columns=cols_to_drop)
                        print(f"   –£–¥–∞–ª–µ–Ω–æ {len(cols_to_drop)} —Å—Ç–æ–ª–±—Ü–æ–≤ Playing Time –∏–∑ {table_name}: {cols_to_drop}")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–æ–ª–æ–Ω–∫–∞–º (–∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö)
                key_columns = ['Season', 'Age', 'Squad', 'Country', 'Comp', 'LgRank']
                new_columns = []

                for col in table.columns:
                    col_str = str(col)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤–æ–π
                    is_key = any(key in col_str for key in key_columns)

                    if is_key or table_name == 'standard':
                        new_columns.append(col_str)
                    else:
                        new_columns.append(f"{col_str}_{table_name}")

                table.columns = new_columns

                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                table = clean_dataframe(table)
                processed_tables[table_name] = table

                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(table)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_name}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            print(f"\nüîó –û–±—ä–µ–¥–∏–Ω—è—é {len(processed_tables)} —Ç–∞–±–ª–∏—Ü...")

            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –æ—Å–Ω–æ–≤—ã
            if 'standard' in processed_tables:
                merged_df = processed_tables['standard'].copy()
                print(f"–ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (standard): {merged_df.shape}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                merge_keys = []
                for col in merged_df.columns:
                    col_lower = str(col).lower()
                    if any(key in col_lower for key in ['season', 'squad', 'comp']):
                        merge_keys.append(col)

                if not merge_keys:
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å")
                    merge_keys = None
                else:
                    print(f"–ö–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {merge_keys}")

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                for table_name, table_df in processed_tables.items():
                    if table_name == 'standard':
                        continue

                    print(f"–û–±—ä–µ–¥–∏–Ω—è—é —Å {table_name}: {table_df.shape}")

                    if merge_keys:
                        try:
                            merged_df = pd.merge(merged_df, table_df, on=merge_keys, how='left', suffixes=('', f'_dup_{table_name}'))
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ {table_name}: {e}")
                            # –ü—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
                            merged_df = pd.concat([merged_df, table_df], axis=1)
                    else:
                        merged_df = pd.concat([merged_df, table_df], axis=1)

                    print(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {merged_df.shape}")

                all_dataframes = {'all_competitions': merged_df}
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Å–Ω–æ–≤–∞")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            return None

        if not all_dataframes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            return None

        print(f"\nüìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        final_df = all_dataframes['all_competitions'].copy()
        print(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {final_df.shape[0]} —Å—Ç—Ä–æ–∫, {final_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {list(final_df.columns[:10])}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å —Å–µ–∑–æ–Ω–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        season_cols = [col for col in final_df.columns if 'season' in col.lower() or any(word in col.lower() for word in ['season', 'year'])]
        comp_cols = [col for col in final_df.columns if 'comp' in col.lower() or 'tournament' in col.lower()]

        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–æ–≤: {season_cols}")
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {comp_cols}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        print("\nüßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–ª–æ–Ω–∫–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _dup_
        dup_cols = [col for col in final_df.columns if '_dup_' in col]
        final_df = final_df.drop(columns=dup_cols)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        final_df = clean_dataframe(final_df)

        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        final_df = clean_final_dataframe(final_df)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not output_path:
            if simple_filename:
                # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è –≤ –ø–∞–ø–∫–µ test_arsenal_players
                normalized_name = normalize_name(player_name)
                output_file = f'/root/data_platform/test_arsenal_players/{normalized_name}.csv'
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                normalized_name = normalize_name(player_name)
                output_file = f'/root/data_platform/{normalized_name}_all_competitions.csv'
        else:
            output_file = output_path

        final_df.to_csv(output_file, index=False, encoding='utf-8')

        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {final_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫):")

        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–µ–∑–æ–Ω–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –±–æ–ª–µ–µ –≥–∏–±–∫–æ
        season_col = None
        squad_col = None
        comp_col = None

        for col in final_df.columns:
            col_lower = str(col).lower()
            if 'season' in col_lower and season_col is None:
                season_col = col
            elif 'squad' in col_lower and squad_col is None:
                squad_col = col
            elif ('comp' in col_lower or 'tournament' in col_lower) and comp_col is None:
                comp_col = col

        if season_col and squad_col and comp_col:
            sample_data = final_df[[season_col, squad_col, comp_col]].head(10)
            print(sample_data.to_string(index=False))
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏
            print(final_df.iloc[:10, :3].to_string(index=False))
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏: {list(final_df.columns[:3])}")

        return final_df

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å FBref',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                              # –ü–∞—Ä—Å–∏–Ω–≥ William Saliba (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  %(prog)s --squad arsenal              # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ Arsenal
  %(prog)s --squad arsenal --limit 5    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5 –∏–≥—Ä–æ–∫–æ–≤ Arsenal
  %(prog)s --squad-url "URL"            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É URL
  %(prog)s --fix file.csv               # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CSV —Ñ–∞–π–ª–∞
  %(prog)s --fix file.csv -o fixed.csv  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
    )

    parser.add_argument('--fix',
                       help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º CSV —Ñ–∞–π–ª–µ')
    parser.add_argument('-o', '--output',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ CSV (—Ç–æ–ª—å–∫–æ —Å --fix)')

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--squad-url',
                       help='URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤')
    parser.add_argument('--squad',
                       choices=['arsenal'],
                       help='–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (arsenal)')
    parser.add_argument('--limit',
                       type=int,
                       help='–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')
    parser.add_argument('--delay',
                       type=int,
                       default=4,
                       help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4)')

    args = parser.parse_args()

    if args.fix:
        # –†–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CSV
        if args.output:
            result = fix_existing_csv(args.fix, args.output)
        else:
            result = fix_existing_csv(args.fix)

        if result is not None:
            print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {args.fix} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            print(f"\nüí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {args.fix} –Ω–µ —É–¥–∞–ª–æ—Å—å.")
            sys.exit(1)

    elif args.squad or args.squad_url:
        # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
        squad_url = None

        if args.squad == 'arsenal':
            squad_url = "https://fbref.com/en/squads/18bb7c10/2023-2024/Arsenal-Stats"
        elif args.squad_url:
            squad_url = args.squad_url

        if squad_url:
            result = parse_arsenal_squad(
                squad_url=squad_url,
                limit=args.limit,
                delay=args.delay
            )

            if result is not None and result > 0:
                print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result} –∏–≥—Ä–æ–∫–æ–≤.")
            else:
                print("\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–¥–∞–ª—Å—è.")
                sys.exit(1)
        else:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URL –∫–æ–º–∞–Ω–¥—ã")
            sys.exit(1)

    else:
        # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å FBref (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        result = parse_from_fbref()
        if result is not None:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ß–∏—Å—Ç—ã–π CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω.")
        else:
            print("\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.")
            sys.exit(1)

if __name__ == "__main__":
    main()