#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö William Saliba —Å FBref
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–∞–π—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö CSV —Ñ–∞–π–ª–æ–≤
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import time
import re
import numpy as np
from io import StringIO
import argparse
import sys

def fix_column_names(columns):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫, —É–±–∏—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ Unnamed: –ø—Ä–µ—Ñ–∏–∫—Å—ã"""
    new_columns = []

    for col in columns:
        col_str = str(col)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å "Unnamed: X_level_0_"
        if col_str.startswith('Unnamed:') and '_level_0_' in col_str:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            clean_name = col_str.split('_')[-1]
            new_columns.append(clean_name)
        else:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            new_columns.append(col_str)

    return new_columns

def clean_dataframe(df):
    """–û—á–∏—Å—Ç–∫–∞ DataFrame –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if df.empty:
        return df

    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º Matches
    matches_cols = [col for col in df.columns if 'Matches' in str(col) or 'matches' in str(col).lower()]
    df = df.drop(columns=matches_cols, errors='ignore')

    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
    season_cols = [col for col in df.columns if 'Season' in str(col)]
    if season_cols:
        season_col = season_cols[0]

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        # –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        df = df[~df[season_col].astype(str).str.contains('Season|Seasons|Club|Clubs|Total|League', na=False)]

        # –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Å–µ–∑–æ–Ω–∞
        # –û—Å—Ç–∞–≤–ª—è–µ–º –í–°–ï —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–µ–∑–æ–Ω–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏/—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º–∏
    comp_cols = [col for col in df.columns if 'Comp' in str(col) and 'Competition' not in str(col)]
    if comp_cols:
        comp_col = comp_cols[0]
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        df = df[~df[comp_col].astype(str).str.contains('Comp|Competition|Country|Squad|MP|Min', na=False)]

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df.dropna(how='all')

    return df

def clean_aggregated_rows(df):
    """–£–¥–∞–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if df.empty:
        return df

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–æ–±—ã—á–Ω–æ Season –∏–ª–∏ –ø—É—Å—Ç–∞—è)
    first_col = df.iloc[:, 0]

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
    # –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "Country" (–ø—Ä–∏–∑–Ω–∞–∫ –º—É—Å–æ—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
    if len(df.columns) >= 4:
        fourth_col = df.iloc[:, 3]  # Country –∫–æ–ª–æ–Ω–∫–∞

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        rows_to_drop = []
        for i, (first_val, fourth_val) in enumerate(zip(first_col, fourth_col)):
            first_str = str(first_val).strip()
            fourth_str = str(fourth_val).strip()

            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è –ò —á–µ—Ç–≤–µ—Ä—Ç–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç "Country"
            if (first_str == '' or first_str == 'nan') and fourth_str == 'Country':
                rows_to_drop.append(i)

        # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.drop(rows_to_drop)

    return df

def clean_final_dataframe(df):
    """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ DataFrame –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")

    # 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã 90s
    print("   –£–¥–∞–ª—è—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã 90s...")
    duplicate_90s_cols = [col for col in df.columns if col in [
        '90s_shooting', '90s_passing', '90s_pass_types',
        '90s_defense', '90s_gca', '90s_possession', '90s_misc'
    ]]
    df = df.drop(columns=duplicate_90s_cols)
    print(f"   –£–¥–∞–ª–µ–Ω–æ {len(duplicate_90s_cols)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–æ–ª–±—Ü–æ–≤ 90s")

    # 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ snake_case
    print("   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã...")
    basic_renames = {
        'Season': 'season',
        'Age': 'age',
        'Squad': 'squad',
        'Country': 'country',
        'Comp': 'competition',
        'MP': 'matches_played',
        'Playing Time_Starts': 'starts',
        'Playing Time_Min': 'minutes',
        'Playing Time_90s': 'minutes_90'
    }
    df = df.rename(columns=basic_renames)

    # 3. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è Playing Time —Å—Ç–æ–ª–±—Ü—ã
    print("   –£–¥–∞–ª—è—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è Playing Time —Å—Ç–æ–ª–±—Ü—ã...")
    duplicate_pt_cols = [col for col in df.columns if col in [
        'Playing Time_Min_playing_time', 'Playing Time_90s_playing_time'
    ]]
    df = df.drop(columns=duplicate_pt_cols)

    # 4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ Playing Time —Å—Ç–æ–ª–±—Ü—ã
    print("   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é Playing Time —Å—Ç–æ–ª–±—Ü—ã...")
    pt_renames = {
        'Playing Time_Mn/MP': 'minutes_per_match',
        'Playing Time_Min%_playing_time': 'minutes_pct',
        'Starts_Starts_playing_time': 'starts_total',
        'Starts_Mn/Start_playing_time': 'minutes_per_start',
        'Starts_Compl': 'matches_completed',
        'Subs_Subs_playing_time': 'subs_on',
        'Subs_Mn/Sub_playing_time': 'minutes_per_sub',
        'Subs_unSub_playing_time': 'subs_unused',
        'Team Success_PPM_playing_time': 'team_points_per_match',
        'Team Success_onG_playing_time': 'team_goals_for',
        'Team Success_onGA_playing_time': 'team_goals_against',
        'Team Success_+/-_playing_time': 'team_goal_diff',
        'Team Success_+/-90_playing_time': 'team_goal_diff_per90',
        'Team Success_On-Off_playing_time': 'team_on_off',
        'Team Success (xG)_onxG_playing_time': 'team_xg_for',
        'Team Success (xG)_onxGA_playing_time': 'team_xg_against',
        'Team Success (xG)_xG+/-_playing_time': 'team_xg_diff',
        'Team Success (xG)_xG+/-90_playing_time': 'team_xg_diff_per90',
        'Team Success (xG)_On-Off_playing_time': 'team_xg_on_off'
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ DataFrame
    existing_pt_renames = {old: new for old, new in pt_renames.items() if old in df.columns}
    df = df.rename(columns=existing_pt_renames)
    print(f"   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ {len(existing_pt_renames)} Playing Time —Å—Ç–æ–ª–±—Ü–æ–≤")

    # 5. –°–æ–∫—Ä–∞—â–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∞–±–ª–∏—Ü
    print("   –°–æ–∫—Ä–∞—â–∞—é —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–∞–±–ª–∏—Ü...")
    suffix_map = {
        '_shooting': '_sh',
        '_passing': '_pass',
        '_pass_types': '_pt',
        '_defense': '_def',
        '_possession': '_poss',
        '_misc': '_misc',
        '_gca': '_gca'
    }

    new_columns = []
    for col in df.columns:
        new_col = col
        for old_suffix, new_suffix in suffix_map.items():
            if col.endswith(old_suffix):
                new_col = col.replace(old_suffix, new_suffix)
                break
        new_columns.append(new_col)

    df.columns = new_columns

    # 6. –ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ snake_case –∏ –∑–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    print("   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ snake_case...")

    def convert_to_snake_case(column_name):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø–æ–ª–Ω—ã–π snake_case —Å –∑–∞–º–µ–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        col = str(column_name)

        # –ó–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        col = col.replace('%', '_pct')
        col = col.replace('+', '_plus_')
        col = col.replace('-', '_minus_')
        col = col.replace('/', '_per_')
        col = col.replace('(', '_')
        col = col.replace(')', '_')
        col = col.replace(' ', '_')
        col = col.replace('&', '_and_')
        col = col.replace('#', '_num_')

        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        col = re.sub(r'_+', '_', col)

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        col = col.strip('_')

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lowercase
        col = col.lower()

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        replacements = {
            'g_plus_a': 'goals_plus_assists',
            'g_minus_pk': 'goals_minus_penalties',
            'npxg_plus_xag': 'npxg_plus_xag',
            'g_plus_a_minus_pk': 'goals_plus_assists_minus_penalties',
            'per_90_minutes': 'per_90',
            'gca_types': 'gca_types',
            'sca_types': 'sca_types',
            'aerial_duels': 'aerial_duels',
            'def_3rd': 'def_third',
            'mid_3rd': 'mid_third',
            'att_3rd': 'att_third',
            'def_pen': 'def_penalty_area',
            'att_pen': 'att_penalty_area',
            'take_minus_ons': 'takeons',
            'team_success': 'team_success',
            'mn_per_mp': 'minutes_per_match',
            'min_pct': 'minutes_pct',
            'mn_per_start': 'minutes_per_start',
            'mn_per_sub': 'minutes_per_sub'
        }

        for old, new in replacements.items():
            col = col.replace(old, new)

        return col

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Å—Ç–æ–ª–±—Ü–∞–º
    new_column_names = [convert_to_snake_case(col) for col in df.columns]
    df.columns = new_column_names

    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(df.columns)} –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ snake_case")

    # 7. –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("   –û—á–∏—â–∞—é –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")

    # –û—á–∏—â–∞–µ–º Country (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "eng ENG" -> "ENG")
    if 'country' in df.columns:
        df['country'] = df['country'].astype(str).str.replace(r'^[a-z]+ ', '', regex=True)
        df['country'] = df['country'].replace('nan', '')

    # –û—á–∏—â–∞–µ–º Competition (—É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ª–∏–≥ —Ç–∏–ø–∞ "1. Ligue 1" -> "Ligue 1")
    if 'competition' in df.columns:
        df['competition'] = df['competition'].astype(str).str.replace(r'^\d+\. ', '', regex=True)
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        df['competition'] = df['competition'].str.replace('Jr. PL2 ‚Äî Div. 1', 'PL2 Div 1')

    print(f"‚úÖ –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
    return df

def analyze_all_tables(all_page_tables):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö {len(all_page_tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")

    for i, table in enumerate(all_page_tables):
        if len(table) < 5:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            continue

        print(f"\n=== –¢–∞–±–ª–∏—Ü–∞ #{i} ===")
        print(f"–†–∞–∑–º–µ—Ä: {len(table)} —Å—Ç—Ä–æ–∫ √ó {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
        cols = []
        for col in table.columns[:10]:
            if isinstance(col, tuple):
                clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                cols.append(clean_col)
            else:
                cols.append(str(col))

        print(f"–ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {cols}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã
        cols_str = str(table.columns).lower()
        possible_types = []

        if ('season' in cols_str or 'squad' in cols_str) and 'gls' in cols_str and 'ast' in cols_str:
            possible_types.append("STANDARD")
        if 'shooting' in cols_str or ('sh' in cols_str and 'sot' in cols_str):
            possible_types.append("SHOOTING")
        if 'passing' in cols_str or ('cmp' in cols_str and 'att' in cols_str):
            possible_types.append("PASSING")
        if 'pass types' in cols_str or 'live' in cols_str:
            possible_types.append("PASS_TYPES")
        if any(marker in cols_str for marker in ['gca', 'sca', 'goal creation', 'shot creation', 'gca90', 'sca90', 'passlive', 'passdead']):
            possible_types.append("GCA/SCA")
        if 'defense' in cols_str or 'tkl' in cols_str:
            possible_types.append("DEFENSE")
        if any(marker in cols_str for marker in ['possession', 'touches', 'carries', 'take-ons', 'dribbles', 'targ', 'succ', 'tkld', 'totdist', 'prgdist']):
            possible_types.append("POSSESSION")
        if 'playing time' in cols_str or 'starts' in cols_str:
            possible_types.append("PLAYING_TIME")
        if any(marker in cols_str for marker in ['misc', 'fls', 'fld', 'off', 'crs', 'tklw', 'pkwon', 'pkcon', 'og', 'recov', 'aerial', 'won', 'lost']):
            possible_types.append("MISCELLANEOUS")

        if possible_types:
            print(f"–í–æ–∑–º–æ–∂–Ω—ã–π —Ç–∏–ø: {', '.join(possible_types)}")
        else:
            print("–¢–∏–ø: –ù–ï–û–ü–û–ó–ù–ê–ù–ù–ê–Ø")

def fix_existing_csv(input_file, output_file=None):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º CSV —Ñ–∞–π–ª–µ"""
    if output_file is None:
        output_file = input_file.replace('.csv', '_fixed.csv')

    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ: {input_file}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª
        df = pd.read_csv(input_file)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        problem_cols = [col for col in df.columns[:10] if 'Unnamed:' in str(col)]
        if problem_cols:
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫:")
            for col in problem_cols[:5]:
                print(f"  - {col}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        print("\n‚ú® –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫...")
        new_column_names = fix_column_names(df.columns)
        df.columns = new_column_names

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        print("\n‚úÖ –ù–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:")
        for new in new_column_names[:10]:
            print(f"  - {new}")

        # –û—á–∏—â–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        print("\nüßπ –£–¥–∞–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏...")
        original_rows = len(df)
        df = clean_aggregated_rows(df)
        removed_rows = original_rows - len(df)

        if removed_rows > 0:
            print(f"  –£–¥–∞–ª–µ–Ω–æ {removed_rows} –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
        else:
            print("  –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –û–±—Ä–∞–∑–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        sample_cols = ['Season', 'Squad', 'Comp']
        available_cols = [col for col in sample_cols if col in df.columns]

        if available_cols:
            print(df[available_cols].head(5).to_string(index=False))
        else:
            print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏:")
            print(df.iloc[:5, :3].to_string(index=False))

        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return df

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def scrape_all_competitions_table(soup, table_id, table_name):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏"""
    print(f"–ü–∞—Ä—Å–∏–Ω–≥ {table_name} (ID: {table_id})...")

    table = soup.find('table', {'id': table_id})
    if not table:
        print(f"–¢–∞–±–ª–∏—Ü–∞ {table_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return pd.DataFrame()

    try:
        # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É
        tables = pd.read_html(StringIO(str(table)), header=[0,1])
        if not tables:
            return pd.DataFrame()

        df = tables[0]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if isinstance(df.columns, pd.MultiIndex):
            new_columns = []
            for col in df.columns:
                if isinstance(col, tuple):
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —É—Ä–æ–≤–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                    clean_col = re.sub(r'_+', '_', clean_col).strip('_')
                else:
                    clean_col = str(col)
                new_columns.append(clean_col)
            df.columns = new_columns

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å "Unnamed:"
        df.columns = fix_column_names(df.columns)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–æ–ª–æ–Ω–∫–∞–º (–∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö)
        key_columns = ['Season', 'Age', 'Squad', 'Country', 'Comp', 'LgRank', 'MP']
        new_columns = []

        for col in df.columns:
            col_str = str(col)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤–æ–π
            is_key = any(key in col_str for key in key_columns)

            if is_key or table_name == 'standard':
                new_columns.append(col_str)
            else:
                new_columns.append(f"{col_str}_{table_name}")

        df.columns = new_columns

        # –û—á–∏—â–∞–µ–º DataFrame
        df = clean_dataframe(df)

        print(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_name}")
        return df

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {table_name}: {e}")
        return pd.DataFrame()

def parse_from_fbref():
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å FBref"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ William Saliba...")

    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    url = "https://fbref.com/en/players/972aeb2a/all_comps/William-Saliba-Stats---All-Competitions"

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        print("üì• –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')

        # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º pandas.read_html –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        print("üîç –ò—â—É –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            all_page_tables = pd.read_html(StringIO(response.content.decode('utf-8')), header=[0,1])

            print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_page_tables)} —Ç–∞–±–ª–∏—Ü –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            key_tables = {}

            for i, table in enumerate(all_page_tables):
                if len(table) < 10 or len(table.columns) < 10:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    continue

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã
                cols_str = str(table.columns).lower()

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
                if ('season' in cols_str or 'squad' in cols_str) and 'gls' in cols_str and 'ast' in cols_str:
                    if 'standard' not in key_tables:
                        key_tables['standard'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ STANDARD #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –£–¥–∞—Ä—ã
                elif 'shooting' in cols_str or ('sh' in cols_str and 'sot' in cols_str):
                    if 'shooting' not in key_tables:
                        key_tables['shooting'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ SHOOTING #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –ü–µ—Ä–µ–¥–∞—á–∏
                elif 'passing' in cols_str or ('cmp' in cols_str and 'att' in cols_str):
                    if 'passing' not in key_tables:
                        key_tables['passing'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ PASSING #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –¢–∏–ø—ã –ø–µ—Ä–µ–¥–∞—á
                elif 'pass types' in cols_str or 'live' in cols_str:
                    if 'pass_types' not in key_tables:
                        key_tables['pass_types'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ PASS TYPES #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ–≤ –∏ —É–¥–∞—Ä–æ–≤
                elif any(marker in cols_str for marker in ['gca', 'sca', 'goal creation', 'shot creation', 'gca90', 'sca90', 'passlive', 'passdead']):
                    if 'gca' not in key_tables:
                        key_tables['gca'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ GCA/SCA #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –ó–∞—â–∏—Ç–∞
                elif 'defense' in cols_str or 'tkl' in cols_str:
                    if 'defense' not in key_tables:
                        key_tables['defense'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ DEFENSE #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

                # –ò–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –†–ê–ù–¨–®–ï possession —Å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏)
                elif any(marker in cols_str for marker in ['mn/mp', 'min%', 'team success', 'ppm']) and 'touches' not in cols_str:
                    if 'playing_time' not in key_tables:
                        key_tables['playing_time'] = (i, table)
                        first_cols = [str(col) for col in table.columns[:5]]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ PLAYING TIME #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                        print(f"   –ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {first_cols}")

                # –í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å touches)
                elif 'touches' in cols_str and any(marker in cols_str for marker in ['def pen', 'def 3rd', 'mid 3rd', 'att 3rd', 'dribbles']):
                    if 'possession' not in key_tables:
                        key_tables['possession'] = (i, table)
                        first_cols = [str(col) for col in table.columns[:5]]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ POSSESSION #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")
                        print(f"   –ü–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {first_cols}")

                # –†–∞–∑–Ω–æ–µ
                elif any(marker in cols_str for marker in ['misc', 'fls', 'fld', 'off', 'crs', 'tklw', 'pkwon', 'pkcon', 'og', 'recov', 'aerial', 'won', 'lost']):
                    if 'misc' not in key_tables:
                        key_tables['misc'] = (i, table)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ MISC #{i}: {len(table)} —Å—Ç—Ä–æ–∫, {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")

            # Fallback-–º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
            expected_tables = ['standard', 'shooting', 'passing', 'pass_types', 'gca', 'defense', 'possession', 'playing_time', 'misc']
            missing_tables = [t for t in expected_tables if t not in key_tables]

            if missing_tables and len(key_tables) >= 6:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã 6 —Ç–∞–±–ª–∏—Ü
                print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(key_tables)} —Ç–∞–±–ª–∏—Ü –∏–∑ {len(expected_tables)} –æ–∂–∏–¥–∞–µ–º—ã—Ö")
                print(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                print("–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏...")

                # –¢–∏–ø–∏—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü –Ω–∞ FBref (–º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è)
                expected_positions = {
                    'gca': [19, 20, 21, 22],                  # –æ–±—ã—á–Ω–æ –æ–∫–æ–ª–æ 20–π –ø–æ–∑–∏—Ü–∏–∏
                    'possession': [37, 38, 39, 40, 41, 42],   # —Ç–∞–±–ª–∏—Ü—ã —Å Touches –¥–∞–Ω–Ω—ã–º–∏
                    'playing_time': [43, 44, 45, 46, 47, 48], # —Ç–∞–±–ª–∏—Ü—ã —Å Playing Time –¥–∞–Ω–Ω—ã–º–∏
                    'misc': [49, 50, 51, 52, 53, 54]          # –æ–±—ã—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ
                }

                for table_name in missing_tables:
                    if table_name in expected_positions:
                        for pos in expected_positions[table_name]:
                            if pos < len(all_page_tables) and len(all_page_tables[pos]) > 10:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–æ–º
                                is_duplicate = False
                                for existing_name, (existing_pos, _) in key_tables.items():
                                    if existing_pos == pos:
                                        is_duplicate = True
                                        break

                                if not is_duplicate:
                                    key_tables[table_name] = (pos, all_page_tables[pos])
                                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table_name.upper()} –ø–æ –ø–æ–∑–∏—Ü–∏–∏ #{pos}")
                                    break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
            final_missing = [t for t in expected_tables if t not in key_tables]

            if final_missing:
                print(f"\n‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {', '.join(final_missing)}")
                print("–ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
                analyze_all_tables(all_page_tables)

            if not key_tables:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–ª—é—á–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
                return None

            print(f"\nüîó –ù–∞–π–¥–µ–Ω–æ {len(key_tables)} –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            processed_tables = {}

            for table_name, (table_idx, table) in key_tables.items():
                print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É {table_name}...")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if isinstance(table.columns, pd.MultiIndex):
                    new_columns = []
                    for col in table.columns:
                        if isinstance(col, tuple):
                            clean_col = '_'.join([str(c) for c in col if str(c) != 'nan' and str(c).strip()])
                            clean_col = re.sub(r'_+', '_', clean_col).strip('_')
                        else:
                            clean_col = str(col)
                        new_columns.append(clean_col)
                    table.columns = new_columns

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å "Unnamed:"
                table.columns = fix_column_names(table.columns)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–æ–ª–æ–Ω–∫–∞–º (–∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö)
                key_columns = ['Season', 'Age', 'Squad', 'Country', 'Comp', 'LgRank', 'MP']
                new_columns = []

                for col in table.columns:
                    col_str = str(col)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤–æ–π
                    is_key = any(key in col_str for key in key_columns)

                    if is_key or table_name == 'standard':
                        new_columns.append(col_str)
                    else:
                        new_columns.append(f"{col_str}_{table_name}")

                table.columns = new_columns

                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                table = clean_dataframe(table)
                processed_tables[table_name] = table

                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(table)} —Å—Ç—Ä–æ–∫ –∏–∑ {table_name}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            print(f"\nüîó –û–±—ä–µ–¥–∏–Ω—è—é {len(processed_tables)} —Ç–∞–±–ª–∏—Ü...")

            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –æ—Å–Ω–æ–≤—ã
            if 'standard' in processed_tables:
                merged_df = processed_tables['standard'].copy()
                print(f"–ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (standard): {merged_df.shape}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                merge_keys = []
                for col in merged_df.columns:
                    col_lower = str(col).lower()
                    if any(key in col_lower for key in ['season', 'squad', 'comp']):
                        merge_keys.append(col)

                if not merge_keys:
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å")
                    merge_keys = None
                else:
                    print(f"–ö–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {merge_keys}")

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                for table_name, table_df in processed_tables.items():
                    if table_name == 'standard':
                        continue

                    print(f"–û–±—ä–µ–¥–∏–Ω—è—é —Å {table_name}: {table_df.shape}")

                    if merge_keys:
                        try:
                            merged_df = pd.merge(merged_df, table_df, on=merge_keys, how='left', suffixes=('', f'_dup_{table_name}'))
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ {table_name}: {e}")
                            # –ü—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
                            merged_df = pd.concat([merged_df, table_df], axis=1)
                    else:
                        merged_df = pd.concat([merged_df, table_df], axis=1)

                    print(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {merged_df.shape}")

                all_dataframes = {'all_competitions': merged_df}
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—Å–Ω–æ–≤–∞")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            return None

        if not all_dataframes:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            return None

        print(f"\nüìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        final_df = all_dataframes['all_competitions'].copy()
        print(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {final_df.shape[0]} —Å—Ç—Ä–æ–∫, {final_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {list(final_df.columns[:10])}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å —Å–µ–∑–æ–Ω–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        season_cols = [col for col in final_df.columns if 'season' in col.lower() or any(word in col.lower() for word in ['season', 'year'])]
        comp_cols = [col for col in final_df.columns if 'comp' in col.lower() or 'tournament' in col.lower()]

        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–æ–≤: {season_cols}")
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {comp_cols}")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        print("\nüßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–ª–æ–Ω–∫–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _dup_
        dup_cols = [col for col in final_df.columns if '_dup_' in col]
        final_df = final_df.drop(columns=dup_cols)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        final_df = clean_dataframe(final_df)

        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        final_df = clean_final_dataframe(final_df)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = '/root/data_platform/william_saliba_all_competitions.csv'
        final_df.to_csv(output_file, index=False, encoding='utf-8')

        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {final_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫):")

        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–µ–∑–æ–Ω–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –±–æ–ª–µ–µ –≥–∏–±–∫–æ
        season_col = None
        squad_col = None
        comp_col = None

        for col in final_df.columns:
            col_lower = str(col).lower()
            if 'season' in col_lower and season_col is None:
                season_col = col
            elif 'squad' in col_lower and squad_col is None:
                squad_col = col
            elif ('comp' in col_lower or 'tournament' in col_lower) and comp_col is None:
                comp_col = col

        if season_col and squad_col and comp_col:
            sample_data = final_df[[season_col, squad_col, comp_col]].head(10)
            print(sample_data.to_string(index=False))
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏
            print(final_df.iloc[:10, :3].to_string(index=False))
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏: {list(final_df.columns[:3])}")

        return final_df

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='–ü–∞—Ä—Å–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ William Saliba —Å FBref',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                              # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å FBref (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  %(prog)s --fix file.csv               # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CSV —Ñ–∞–π–ª–∞
  %(prog)s --fix file.csv -o fixed.csv  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
    )

    parser.add_argument('--fix',
                       help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º CSV —Ñ–∞–π–ª–µ')
    parser.add_argument('-o', '--output',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ CSV (—Ç–æ–ª—å–∫–æ —Å --fix)')

    args = parser.parse_args()

    if args.fix:
        # –†–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CSV
        if args.output:
            result = fix_existing_csv(args.fix, args.output)
        else:
            result = fix_existing_csv(args.fix)

        if result is not None:
            print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {args.fix} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            print(f"\nüí• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {args.fix} –Ω–µ —É–¥–∞–ª–æ—Å—å.")
            sys.exit(1)
    else:
        # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å FBref (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        result = parse_from_fbref()
        if result is not None:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ß–∏—Å—Ç—ã–π CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω.")
        else:
            print("\nüí• –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.")
            sys.exit(1)

if __name__ == "__main__":
    main()